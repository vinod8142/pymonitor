name: Auto Tag and Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches: [ master ]

jobs:
  tag-and-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Clean up local tags
        run: |
          # Remove all local tags to avoid conflicts
          git tag -l | xargs git tag -d
          git fetch --tags
          echo "✅ Local tags cleaned up"

      - name: Auto Version
        id: version
        run: |
          # Fetch all tags from remote
          git fetch --tags
          
          # Get the latest tag or start with v1.0.0
          if git describe --tags --abbrev=0 2>/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            echo "Last tag found: $LAST_TAG"
            
            # Extract version numbers and increment patch
            if [[ $LAST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR=${BASH_REMATCH[1]}
              MINOR=${BASH_REMATCH[2]} 
              PATCH=${BASH_REMATCH[3]}
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
              echo "Incremented patch version: $NEW_VERSION"
            else
              NEW_VERSION="v1.0.0"
              echo "Unexpected tag format, starting with: $NEW_VERSION"
            fi
          else
            NEW_VERSION="v1.0.0"
            echo "No existing tags, starting with: $NEW_VERSION"
          fi
          
          # Check if the new tag already exists remotely and find available version
          while git ls-remote --tags origin | grep -q "refs/tags/$NEW_VERSION$"; do
            echo "Tag $NEW_VERSION already exists remotely, incrementing..."
            if [[ $NEW_VERSION =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR=${BASH_REMATCH[1]}
              MINOR=${BASH_REMATCH[2]} 
              PATCH=${BASH_REMATCH[3]}
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
            else
              NEW_VERSION="v1.0.0"
            fi
          done
          
          echo "Final version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          # Delete local tag if it exists (safety check)
          git tag -d "${{ steps.version.outputs.version }}" || true
          # Create and push tag
          git tag "${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.version }}"
          echo "✅ Tag created and pushed: ${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Release Created
        run: |
          echo "🎉 Release created successfully!"
          echo "🏷️ Tag: ${{ steps.version.outputs.version }}"